// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SgbdProject.Infrastructure;

#nullable disable

namespace SgbdProject.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241206063149_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SgbdProject.Domain.Entities.AcademicYear", b =>
                {
                    b.Property<Guid>("AcademicYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AcademicYearId");

                    b.HasIndex("UniversityId");

                    b.ToTable("AcademicYear");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Classroom", b =>
                {
                    b.Property<Guid>("ClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("HasAudioSystem")
                        .HasColumnType("bit");

                    b.Property<bool>("HasProjector")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTouchScreen")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassroomId");

                    b.HasIndex("SiteId");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresAudioSystem")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresProjector")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresTouchScreen")
                        .HasColumnType("bit");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.CourseGroup", b =>
                {
                    b.Property<Guid>("CourseGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseGroupId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CourseId");

                    b.HasIndex("GroupId");

                    b.ToTable("CourseGroup");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.CourseSite", b =>
                {
                    b.Property<Guid>("CourseSiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseSiteId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SiteId");

                    b.ToTable("CourseSites");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MainSiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfStudents")
                        .HasColumnType("int");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupId");

                    b.HasIndex("MainSiteId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Holiday", b =>
                {
                    b.Property<Guid>("HolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HolidayId");

                    b.HasIndex("SiteId");

                    b.ToTable("Holiday");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ScheduleId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("GroupId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Site", b =>
                {
                    b.Property<Guid>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UniversityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SiteId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.SiteSchedule", b =>
                {
                    b.Property<Guid>("SiteScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("SiteScheduleId");

                    b.HasIndex("SiteId");

                    b.ToTable("SiteSchedule");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.TravelTime", b =>
                {
                    b.Property<Guid>("TravelTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<Guid>("FromSiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToSiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TravelTimeId");

                    b.HasIndex("FromSiteId");

                    b.HasIndex("ToSiteId");

                    b.ToTable("TravelTimes");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.University", b =>
                {
                    b.Property<Guid>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniversityId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.AcademicYear", b =>
                {
                    b.HasOne("SgbdProject.Domain.Entities.University", "University")
                        .WithMany("AcademicYears")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Classroom", b =>
                {
                    b.HasOne("SgbdProject.Domain.Entities.Site", "Site")
                        .WithMany("Classrooms")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Course", b =>
                {
                    b.HasOne("SgbdProject.Domain.Entities.University", "University")
                        .WithMany("Courses")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.CourseGroup", b =>
                {
                    b.HasOne("SgbdProject.Domain.Entities.AcademicYear", "AcademicYear")
                        .WithMany("CourseGroups")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SgbdProject.Domain.Entities.Course", "Course")
                        .WithMany("CourseGroups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SgbdProject.Domain.Entities.Group", "Group")
                        .WithMany("CourseGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Course");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.CourseSite", b =>
                {
                    b.HasOne("SgbdProject.Domain.Entities.Course", "Course")
                        .WithMany("CourseSites")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SgbdProject.Domain.Entities.Site", "Site")
                        .WithMany("CourseSites")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Group", b =>
                {
                    b.HasOne("SgbdProject.Domain.Entities.Site", "MainSite")
                        .WithMany()
                        .HasForeignKey("MainSiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SgbdProject.Domain.Entities.University", "University")
                        .WithMany("Groups")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainSite");

                    b.Navigation("University");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Holiday", b =>
                {
                    b.HasOne("SgbdProject.Domain.Entities.Site", "Site")
                        .WithMany("Holidays")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("SgbdProject.Domain.Entities.AcademicYear", "AcademicYear")
                        .WithMany("Schedules")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SgbdProject.Domain.Entities.Classroom", "Classroom")
                        .WithMany("Schedules")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SgbdProject.Domain.Entities.Course", "Course")
                        .WithMany("Schedules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SgbdProject.Domain.Entities.Group", "Group")
                        .WithMany("Schedules")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Classroom");

                    b.Navigation("Course");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Site", b =>
                {
                    b.HasOne("SgbdProject.Domain.Entities.University", "University")
                        .WithMany("Sites")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.SiteSchedule", b =>
                {
                    b.HasOne("SgbdProject.Domain.Entities.Site", "Site")
                        .WithMany("SiteSchedules")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.TravelTime", b =>
                {
                    b.HasOne("SgbdProject.Domain.Entities.Site", "FromSite")
                        .WithMany()
                        .HasForeignKey("FromSiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SgbdProject.Domain.Entities.Site", "ToSite")
                        .WithMany()
                        .HasForeignKey("ToSiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromSite");

                    b.Navigation("ToSite");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.AcademicYear", b =>
                {
                    b.Navigation("CourseGroups");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Classroom", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Course", b =>
                {
                    b.Navigation("CourseGroups");

                    b.Navigation("CourseSites");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Group", b =>
                {
                    b.Navigation("CourseGroups");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.Site", b =>
                {
                    b.Navigation("Classrooms");

                    b.Navigation("CourseSites");

                    b.Navigation("Holidays");

                    b.Navigation("SiteSchedules");
                });

            modelBuilder.Entity("SgbdProject.Domain.Entities.University", b =>
                {
                    b.Navigation("AcademicYears");

                    b.Navigation("Courses");

                    b.Navigation("Groups");

                    b.Navigation("Sites");
                });
#pragma warning restore 612, 618
        }
    }
}
